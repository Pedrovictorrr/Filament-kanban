<?php

namespace App\Filament\Resources\HistoriaResource\Pages;

use App\Filament\Resources\HistoriaResource;
use App\Models\User;
use Filament\Notifications\Actions\Action;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\CreateRecord;

class CreateHistoria extends CreateRecord
{
    protected static string $resource = HistoriaResource::class;

    protected function getCreatedNotification(): ?Notification
    {

        $data = $this->data;
        $dataRecord = $this->getRecord();
        $originalId = $dataRecord->getOriginal('id');
        $users = User::whereIn('id', $data['user'])->get();
        Notification::make()
            ->title('Uma história foi atribuida a você')
            ->body('História criada por: '.auth()->user()->name)
            ->success()
            ->actions([
                Action::make('Ver')
                    ->button()
                    ->url(fn (): string => HistoriaResource::getUrl('view', ['record' => $originalId]))
                    ->markAsRead(),
            ])
            ->sendToDatabase($users);

        return Notification::make()
            ->success()
            ->title('História registrado com sucesso')
            ->color('success');
    }

    protected function getHeaderActions(): array
    {
        return [

        ];
    }

    protected function getFormActions(): array
    {
        return [
            $this->getCreateFormAction()
                ->label('F2 - Salvar')
                ->keyBindings('f2'),
            ...(static::canCreateAnother() ? [$this->getCreateAnotherFormAction()] : []),
            $this->getCancelFormAction()
                ->label('F10 - Voltar')
                ->keyBindings('f10')
                ->color('danger'),
        ];
    }

    public function mutateFormDataBeforeCreate(array $data): array
    {
        $data['anexos'] = json_encode($data['anexos']);

        return $data; // TODO: Change the autogenerated stub
    }
}
